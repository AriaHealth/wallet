name: "Development CI/CD Pipelines"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Archive Release
        uses: thedoctor0/zip-release@main
        with:
          type: "zip"
          filename: "${{ github.sha }}.zip"
          exclusions: "*.git* /*node_modules/* infrastructure"

      - uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: "${{ github.sha }}.zip"
          aws_region: eu-west-1
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          destination: s3://${{ secrets.AWS_BUCKET }}/${{ github.sha }}.zip

      - name: Build Artifact
        if: github.event_name == 'pull_request'
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: |
            -color=false
            -on-error=abort
            -var color=green
            -var aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            -var aws_secret_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            -var aws_bucket=${{ secrets.AWS_BUCKET }}
            -var github_sha=${{ github.sha }}
          target: infrastructure/packer/main.pkr.hcl
          working_directory: .
        env:
          PACKER_LOG: 1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
